// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ExerciseDetails interface {
	IsExerciseDetails()
}

type Exercise struct {
	ID          string          `json:"id"`
	Description string          `json:"description"`
	Details     ExerciseDetails `json:"details,omitempty"`
}

type Mutation struct {
}

type NewExercise struct {
	Description string   `json:"description"`
	Type        string   `json:"type"`
	Weight      *float64 `json:"weight,omitempty"`
	Reps        *int     `json:"reps,omitempty"`
	Sets        *int     `json:"sets,omitempty"`
	DistanceKm  *float64 `json:"distanceKm,omitempty"`
	Time        *float64 `json:"time,omitempty"`
}

type NewSession struct {
	Title     string         `json:"title"`
	Rating    Rating         `json:"rating"`
	Exercises []*NewExercise `json:"exercises,omitempty"`
}

type Query struct {
}

type RunningExerciseDetails struct {
	DistanceKm *float64 `json:"distanceKm,omitempty"`
	Time       *float64 `json:"time,omitempty"`
}

func (RunningExerciseDetails) IsExerciseDetails() {}

type Session struct {
	ID        string      `json:"id"`
	Title     string      `json:"title"`
	Date      string      `json:"date"`
	Rating    Rating      `json:"rating"`
	Exercises []*Exercise `json:"exercises,omitempty"`
}

type StrengthTrainingExerciseDetails struct {
	Weight *float64 `json:"weight,omitempty"`
	Reps   *int     `json:"reps,omitempty"`
	Sets   *int     `json:"sets,omitempty"`
}

func (StrengthTrainingExerciseDetails) IsExerciseDetails() {}

type Viewer struct {
	Sessions []*Session `json:"sessions,omitempty"`
}

type Rating string

const (
	RatingTerrible Rating = "TERRIBLE"
	RatingBad      Rating = "BAD"
	RatingOkay     Rating = "OKAY"
	RatingGood     Rating = "GOOD"
	RatingGreat    Rating = "GREAT"
)

var AllRating = []Rating{
	RatingTerrible,
	RatingBad,
	RatingOkay,
	RatingGood,
	RatingGreat,
}

func (e Rating) IsValid() bool {
	switch e {
	case RatingTerrible, RatingBad, RatingOkay, RatingGood, RatingGreat:
		return true
	}
	return false
}

func (e Rating) String() string {
	return string(e)
}

func (e *Rating) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Rating(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Rating", str)
	}
	return nil
}

func (e Rating) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
